# xcube imports
from xcube.core.store import new_data_store
from xcube.core.compute import compute_cube
from xcube.core.maskset import MaskSet

# Various utilities
from sentinelhub import SHConfig

# Only run this cell if you have not created a configuration.

import getpass

config = SHConfig()
# config.sh_client_id = getpass.getpass("Enter your SentinelHub client id")
# config.sh_client_secret = getpass.getpass("Enter your SentinelHub client secret")
config.sh_base_url = "https://sh.dataspace.copernicus.eu"
config.sh_token_url = "https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token"
# config.save("xcube")

# config = SHConfig("xcube")

store = new_data_store(
    "sentinelhub",
    client_id=config.sh_client_id,
    client_secret=config.sh_client_secret,
    instance_url=config.sh_base_url,
    oauth2_url=config.sh_token_url.rsplit("/", maxsplit=1)[0],
)

store.list_data_ids()

# New coordinates for the Po River region
x1 = 9.5   # Longitude (min)
y1 = 44.5  # Latitude (min)
x2 = 10.5  # Longitude (max)
y2 = 45.5  # Latitude (max)

# Bounding box (xmin, ymin, xmax, ymax)
bbox = x1, y1, x2, y2

print("Bounding box for Po River:", bbox)

spatial_res = 0.00018  # = 20.038 meters in degree

store.describe_data("S2L2A")

cube = store.open_data(
    "S2L2A",
    variable_names=["B04", "B05", "B06", "B11", "SCL", "CLD"],
    bbox=bbox,
    spatial_res=spatial_res,
    time_range=["2024-08-10", "2024-08-10"],
    time_period="4D",
    tile_size=[512, 512],
)
cube

scene_classif = MaskSet(cube.SCL)
scene_classif

scene_classif.cirrus

scene_classif.cirrus.plot.imshow(col="time", col_wrap=4, cmap="viridis")

water_cube = cube.where(scene_classif.water)
water_cube

water_cube.B04.plot.imshow(col="time", col_wrap=4, vmin=0, vmax=0.05, cmap="Greys_r")

#Creation of the mci cube 

def compute_mci(b_from, b_peek, b_to, input_params, dim_coords):
    # The first three arguments are chunks of the three input variables we define below.
    # You can name them as you like. They are pure 3D numpy arrays.

    # The 'input_params' argument is a standard parameter that we define in the call below.
    wlen_from = input_params["wlen_from"]
    wlen_peek = input_params["wlen_peek"]
    wlen_to = input_params["wlen_to"]

    # The 'dim_coords' argument is optional and provides the coordinate values for all dimension
    # of the current chunk. We don't use it here, but for many algorithms this is important
    # information (e.g. looking up aux data).
    lon, lat = (dim_coords[dim] for dim in ("lon", "lat"))
    # print('dim_coords from', lon[0], lat[0], 'to', lon[-1], lat[-1])

    # You can use any popular data packages such as numpy, scipy, dask here,
    # or we can use ML packages such as scikitlearn!
    # For simplity, we do some very simple array math here:

    f = (wlen_peek - wlen_from) / (wlen_to - wlen_from)
    mci = (b_peek - b_from) - f * (b_to - b_from)

    return mci

input_params = dict(
    wlen_from=water_cube.B04.attrs["wavelength"],
    wlen_peek=water_cube.B05.attrs["wavelength"],
    wlen_to=water_cube.B06.attrs["wavelength"],
)
input_params

mci_cube = compute_cube(
    compute_mci,
    water_cube,
    input_var_names=["B04", "B05", "B06"],
    input_params=input_params,
    output_var_name="mci",
)
mci_cube

mci_cube.mci.attrs["long_name"] = "Maximum Chlorophyll Index"
mci_cube.mci.attrs["units"] = "unitless"
mci_cube.mci

mci_cube.mci.plot.imshow(
    col="time", col_wrap=4, vmin=-0.001, vmax=0.005, cmap="viridis"
)

mci_cube.mci.sel(lat=54.31, lon=10.45, method="nearest").plot.line(marker="x")

mci_mean = mci_cube.mci.mean(dim="time")

mci_mean.plot.imshow(vmin=-0.005, vmax=0.005, cmap="plasma", figsize=(16, 10))

mci_anomaly = mci_cube.mci - mci_mean

mci_anomaly.plot.imshow(col="time", col_wrap=4, vmin=-0.005, vmax=0.005, cmap="bwr")
